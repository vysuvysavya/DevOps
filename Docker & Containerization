1) Difference between Docker  && VM (Virtual Machine)
 

Virtual Machines	Docker Containers
Need more resources	Less resources are used
Process isolation is done at the hardware level	Process Isolation is done at Operating System-level
Separate Operating System for each VM	Operating System resources can be shared within Docker
VMs can be customized	Custom container setup is easy
Takes time to create a Virtual Machine	The creation of docker is very quick
Booting takes minutes	 Booting is done within seconds.

2) How is Docker different from other container technologies?

To start with, Docker is one of the upcoming and is a fresh project. 
Since its inception has been done in the Cloud era, it been way better than many of the other competing Container technologies which have ruled their way until Docker came into existence.
There is an active community that is running towards the better upbringing of Docker and it has also started extending its support to Windows and Mac OSX environments in recent days. 
Other than these, below are the best possible reasons to highlight Docker as one of the better options to choose from than the existing Container technologies.

There is no limitation on running Docker as the underlying infrastructure can be your laptop or else your Organization’s Public / Private cloud space
Docker with its Container HUB forms the repository of all the containers that you are ever going to work, use and download. Sharing of applications is as well possible with the Containers that you create.
Docker is one of the best-documented technologies available in the Containerization space.
 
3) How to create Docker container?

You can create a Docker Container out of any specific Docker image of your choice and the same can be achieved using the command given below:

docker run -t -i command name
The command above will create the container and also starts it for you.
In order to check whether the Docker container is created and whether it is running or not, you could make use of the following command. 
This command will list out all the Docker containers along with their statuses on the host that the Docker container runs.

docker ps -a
4) Is data lost when the Docker container exits?

There is no loss of data when any of your Docker containers exits as any of the data that your application writes to the disk in order to preserve it. 
This will be done until the container is explicitly deleted. The file system for the Docker container persists even after the Docker container is halted.

5) What’s the difference between up, run, and start?

In any given scenario, you would always want your docker-compose up. Using the command UP, you can start or restart all the services that are defined in a docker-compose.yml file.
In the “attached” mode, which is also the default mode – we will be able to see all the log files from all the containers.
In the “detached” mode, it exits after starting all the containers, which continue to run in the background showing nothing over in the foreground.

Using the docker-compose run command, we will be able to run the one-off or the ad-hoc tasks that are required to be run as per the Business needs and requirements. 
This requires the service name to be provided which you would want to run and based on that, it will only start those containers for the services that the running service depends on. 
Using the run command, you can run your tests or perform any of the administrative tasks like removing/adding data to the data volume container. 
It is also very similar to the docker run –ti command, which opens up an interactive terminal to the containers an exit status that matches with the exit status of the process in the container.

Using the docker-compose start command, you can only restart the containers that were previously created and were stopped. This command never creates any new Docker containers on its own.

6) What are the various states that a Docker container can be in at any given point in time?

There are four states that a Docker container can be in, at any given point in time. Those states are as given as follows:

Running
Paused
Restarting
Exited
7) Briefly explain the Docker container lifecycle.

The Docker container lifecycle entails the following:

Creating the container
Running the container
Pausing the container
Unpausing the container
Starting the container
Stopping the container
Restarting the container
Killing the container
Destroying the container
 
8) What are Docker images and run commands?

Docker images are groups of files that enable instances to be created and run in distinct containers. Each instance is a separate process.

Images are created using the information required to run an executable application.

You can use the Docker run command to create and initialize a container instance using a Docker image. If an image is running, it can be linked to any number of instances (or containers).

9) How is Docker monitored in production?

When running Docker in production, essential statistics can be gathered and examined by using tools like Docker Stats and Docker Events.

Docker Stats can be called from within a container to return data relating to the container’s CPU and memory usage. This is similar to the Linux top command which can be used to examine all running processes and their current computational load.

Docker Events represent a list of commands that can be used to analyze any ongoing activities that are being processed by the Docker Daemon. These commands include attached, commit, rename, destroy, and die.

10) What are Docker Images, Docker Hub, and Docker File?

Docker images: These multi-layer files are used to create instances of a Docker container, and they are built using terminal command instructions or a pre-defined Dockerfile which contains each of these instructions. Using an image can speed up Docker build times due to caching at each step of the build sequence.

Docker hub: This is a service provided by Docker that can be used to find and share Docker images with others in a team. In the same way that GitHub is used to provide a distributed file store (with version control), Docker hub allows you to push and pull images, access private repos that store Docker images, and auto-build Docker images from GitHub or BitBucket repositories, before pushing these to Docker hub.

Dockerfile: This is a text document that is used to store build instructions for a Docker image. When run, Docker executes the commands to automatically an image.

11) List the steps in the deployment process for Dockerized Apps stored In a Git Repo.

The deployment process can vary as a function of the production environment, but the basic process will include the following:

Build the application with Docker Build
Test an image
Push a new image to the Docker registry
Inform the remote application server to obtain the new image from the Docker registry and then run the image
Utilize HTTP proxy for port-swapping
Stop any older containers
 
12) What are CMD and ENTRYPOINT in a Dockerfile?

These instructions pertain to the commands and parameters utilized by a container during its execution. They adhere to the following principles:

  a) In the Dockerfile, it is necessary to include at least one command from CMD or ENTRYPOINT.

  b) ENTRYPOINT offers commands that dictate the execution behavior of a container. These arguments and parameters cannot be overridden when utilizing the run command through the command line interface (CLI).

  c) CMD specifies the default command to be executed when initiating a container. Any parameters passed to this command can be overridden at the CLI if the user supplies an alternative argument with the run command.

13) How will you run an application inside a Linux Container using Docker.

Install Docker and ensure it is running on your system.
Fetch the Fedora 21 base image from Docker Hub. This image serves as the foundation for the Linux operating system.
Utilize the Docker base image to load your application into the container.
Launch a container in interactive mode using the newly created image.
Verify the list of active containers on the system.
Start or stop the Docker container as needed.
Optionally, remove the image or container if no longer required.
14) What is a Hypervisor?

A hypervisor is a form of management software that can be used to create and run virtual machines (VM). This enables a host system to accommodate multiple guest VMs and these will share computational resources including RAM and CPU. By allocating the required computational resources to each VM, it is possible to reduce physical hardware requirements and the maintenance of these.

The two types of hypervisors are:

Type I: This is a lightweight OS that is run on the host system
Type II: This runs like any other piece of software within an existing OS
 
15) What features are provided by Docker Enterprise Edition instead of Docker Community Edition?

Docker Enterprise Edition provides certified Docker images and plugins. With this certification, Docker Inc. ensures that the images in question pass security and best-practice checks. In other words, they guarantee a certain baseline of reliability.

Docker Enterprise Edition also provides Active Directory or LDAP user integration, continuous vulnerability and security scans, and container app and image management features.

16) What is considered best practice for image tagging?

If you’re running your image via the latest tag with a container orchestration environment like Kubernetes, it may cause a problem.

The problem is if you push a new image with just the latest tag, you lose your old image and your deployments will use the new image. If the new image has any problem, your deployments might fail, resulting in downtime.

When you use explicit version numbers to tag Docker images instead, you can roll back to old images easily. Also, when you push a new image to your private registry, your deployments will continue to use the old version number due to your tag until you’re ready to switch each of them over.

The best practice of Docker image tagging is to use both types of tagging. First, tag your Docker images with latest and a version number, then push twice, separately for each tag. For example:

docker tag nginx:latest nginx:0.0.1
docker push nginx:latest
docker push nginx:0.0.1
17) What does the volume parameter do in a docker run command?

The volume parameter syncs a directory in a container with a host directory.

For example:

docker run -v nginx-sites:/etc/nginx/sites-available nginx

This command mounts the nginx-sites directory in the host to the /etc/nginx/sites-available directory. In this way, you can sync nginx sites without restarting the container they’re in. Also, you can protect your data that is generated in your container using a directory in the host. Otherwise, if you delete your container, your data that was generated and stored in your container will naturally be deleted.

When you use the volume parameter, you can use the same data that was generated in a previous container using the same command.

18) If you want to use a base image in Docker and make modifications to it, how do you do that?

We can pull an image from Docker Hub onto our local system using the following Docker command:

$ docker pull <image_name>
19) What is Docker Engine?

Docker Engine is an open-source containerization technology that we can use to build and containerize our applications. Docker Engine is supported by the following components:

Docker Engine REST API
Docker Command-Line Interface (CLI)
Docker Daemon
 
20) What is the difference between CMD and ENTRYPOINT in a Dockerfile?

Both CMD and ENTRYPOINT instructions define what command gets executed when running a container. The difference is in their flexibility and use cases. CMD is used to provide defaults for an executing container. These defaults can include an executable, or they can omit the executable, in which case you must specify an ENTRYPOINT instruction. On the other hand, ENTRYPOINT has two forms, the exec form which is the preferred form, and the shell form. ENTRYPOINT is used when you want containers to be executable.
